{"version":3,"sources":["components/Cards/cards.component.jsx","components/CardLists/card-lists.component.jsx","components/Context/monsters-context.js","components/SearchBox/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Cards","monster","className","alt","src","id","name","email","CardLists","monsters","map","key","MonsterContext","React","createContext","SearchBox","placeholder","useContext","searchField","setSearchField","type","value","onChange","e","target","App","useState","setMonsters","useEffect","fetch","then","response","json","users","filterMonsters","filter","toLowerCase","includes","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAIMA,G,MAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACZ,yBAAKC,UAAU,mBACb,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAQI,GAAlC,4BACtB,4BAAKJ,EAAQK,MACb,2BAAIL,EAAQM,UCFVC,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAChB,yBAAKP,UAAU,cACZO,EAASC,KAAI,SAACT,GAAD,OAAa,kBAAC,EAAD,CAAOU,IAAKV,EAAQI,GAAIJ,QAASA,UCNnDW,EAAiBC,IAAMC,gBCG9BC,G,MAAY,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACGC,qBAAWL,GAA3CM,EAD6B,EAC7BA,YAAaC,EADgB,EAChBA,eACrB,OACE,2BACEC,KAAK,SACLJ,YAAaA,EACbK,MAAOH,EACPI,SAAU,SAACC,GAAD,OAAOJ,EAAeI,EAAEC,OAAOH,Y,MCoBhCI,MAxBf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNjB,EADM,KACIkB,EADJ,OAEyBD,mBAAS,IAFlC,mBAENR,EAFM,KAEOC,EAFP,KAIbS,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAWN,EAAYM,QAE9B,IAEH,IAAMC,EAAiBzB,EAAS0B,QAAO,SAAClC,GAAD,OAAaA,EAAQK,KAAK8B,cAAcC,SAASnB,EAAYkB,kBAEpG,OACE,kBAACxB,EAAe0B,SAAhB,CAAyBjB,MAAO,CAAEH,cAAaC,mBAC7C,yBAAKjB,UAAU,OACb,gDACA,kBAAC,EAAD,CAAWc,YAAY,oBACvB,kBAAC,EAAD,CAAWP,SAAUyB,OCdTK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.c5a1cbd8.chunk.js","sourcesContent":["import React from 'react';\n\nimport './cards.styles.css';\n\nconst Cards = ({ monster }) => (\n  <div className=\"cards-container\">\n    <img alt=\"monster\" src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} />\n    <h2>{monster.name}</h2>\n    <p>{monster.email}</p>\n  </div>\n);\n\nexport { Cards as default };\n","import React from 'react';\n\nimport Cards from '../Cards/cards.component';\n\nimport './card-lists.styles.css';\n\nconst CardLists = ({ monsters }) => (\n  <div className=\"card-lists\">\n    {monsters.map((monster) => <Cards key={monster.id} monster={monster} />)}\n  </div>\n);\n\nexport { CardLists as default };\n","import React from 'react';\n\nexport const MonsterContext = React.createContext();","import React, { useContext } from 'react';\n\nimport { MonsterContext } from '../Context/monsters-context';\nimport './search-box.styles.css';\n\nconst SearchBox = ({ placeholder }) => {\n  const { searchField, setSearchField } = useContext(MonsterContext);\n  return (\n    <input\n      type=\"search\"\n      placeholder={placeholder}\n      value={searchField}\n      onChange={(e) => setSearchField(e.target.value)}\n    />\n  );\n};\n\nexport { SearchBox as default };\n","import React, { useState, useEffect } from 'react';\n\nimport CardLists from './components/CardLists/card-lists.component';\nimport SearchBox from './components/SearchBox/search-box.component';\n\nimport { MonsterContext } from './components/Context/monsters-context';\nimport './App.css';\n\nfunction App() {\n  const [monsters, setMonsters] = useState([]);\n  const [searchField, setSearchField] = useState('');\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => setMonsters(users));\n    \n  }, []);\n  \n  const filterMonsters = monsters.filter((monster) => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n  \n  return (\n    <MonsterContext.Provider value={{ searchField, setSearchField }}>\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder=\"search monsters\" />\n        <CardLists monsters={filterMonsters} />\n      </div>\n    </MonsterContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}